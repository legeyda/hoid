#!/usr/bin/env shelduck_run
set -eu

shelduck import https://raw.githubusercontent.com/legeyda/bobshell/refs/heads/unstable/run.sh
# shelduck import https://raw.githubusercontent.com/legeyda/bobshell/refs/heads/unstable/map.sh
shelduck import https://raw.githubusercontent.com/legeyda/bobshell/refs/heads/unstable/misc/random.sh
shelduck import https://raw.githubusercontent.com/legeyda/bobshell/refs/heads/unstable/misc/defun.sh
shelduck import https://raw.githubusercontent.com/legeyda/bobshell/refs/heads/unstable/bobtest.sh



on_start() {
	: "${HOID_BUILD_ROOT:=./target}"
	export HOID_BUILD_ROOT
	if ! bobshell_starts_with "$HOID_BUILD_ROOT" /  && ! bobshell_starts_with "$HOID_BUILD_ROOT" . ; then
		HOID_BUILD_ROOT="./$HOID_BUILD_ROOT"
	fi
	: "${HOID_BUILD_BOBSHELL_BRANCH:=unstable}"
	: "${HOID_BUILD_HOID_BRANCH:=main}"
}

run_bundle() {
	true
	# hoid_bundle.sh
}

run_build() {
	mkdir -p "$HOID_BUILD_ROOT/release"
	bobshell_resource_copy https://github.com/legeyda/shelduck/releases/latest/download/shelduck.sh "file://$HOID_BUILD_ROOT/release/hoid_bundle.sh"

	_run_build__index=1
	_run_build__func=''

	{
		run_build_repo shelduck main
		run_build_repo bobshell "$HOID_BUILD_BOBSHELL_BRANCH"
		run_build_hoid "$HOID_BUILD_HOID_BRANCH"
		# shellcheck disable=SC2016
		printf '
shelduck_print_origin() {
	%s
	shelduck_cached_fetch_url "$1"
}


' "$_run_build__func"
	} >> "$HOID_BUILD_ROOT/release/hoid_bundle.sh"

}

# fun: run_build_repo REPO BRANCH
run_build_repo() {
	_run_build_repo__temp=$(mktemp -d)
	bobshell_fetch_url "https://github.com/legeyda/$1/archive/refs/heads/$2.tar.gz" > "$_run_build_repo__temp/$1-$2.tar.gz"
	tar --extract --ungzip --file "$_run_build_repo__temp/$1-$2.tar.gz" --directory "$_run_build_repo__temp"

	_run_build__script=$(find "$_run_build_repo__temp/$1-$2" -path '*/.*' -o -path '*/test_*.sh' -prune -o -name '*.sh' -printf "run_build_file './%P'\n")
	_run_build__url="https://raw.githubusercontent.com/legeyda/$1/refs/heads/$2"
	_run_build__path="$_run_build_repo__temp/$1-$2"
	_run_build__func="$_run_build__func
	if bobshell_starts_with \"\$1\" '$_run_build__url/'; then
"
	eval "$_run_build__script"
	_run_build__func="$_run_build__func
	fi
"
	unset _run_build__script _run_build__url _run_build__path

	rm -rf "$_run_build_repo__temp/$1-$2.tar.gz" "$_run_build_repo__temp/$1-$2"	
	unset _run_build_repo__temp
	
	
	
}

run_build_hoid() {

	_run_build__script=$(find . -path '*/.*' -o -path '*/test_*.sh' -o -path "$HOID_BUILD_ROOT/*" -prune \
			-o -name '*.sh' -printf "run_build_file './%P'\n")
	_run_build__url="https://raw.githubusercontent.com/legeyda/hoid/refs/heads/$1"
	_run_build__path="."
	_run_build__func="$_run_build__func
	if bobshell_starts_with \"\$1\" '$_run_build__url/'; then
"
	eval "$_run_build__script"
	_run_build__func="$_run_build__func
	fi
"

	unset _run_build__script _run_build__url _run_build__path
}

run_build_file() {
	bobshell_remove_prefix "$1" ./ _run_build_file

	# shellcheck disable=SC2016
	printf '\n\n\nHOID_BUILD_%s=$(cat<<\HOID_BUILD_EOF_%s\n' "$_run_build__index" "$_run_build__index"
	cat "$_run_build__path/$_run_build_file"
	printf '\nHOID_BUILD_EOF_%s\n)\n' "$_run_build__index"

	_run_build__func="$_run_build__func
		if [ \"\$1\" = '$_run_build__url/$_run_build_file' ]; then
			bobshell_getvar HOID_BUILD_$_run_build__index
			return
		fi

"


	_run_build__index=$(( 1 + _run_build__index ))
}

run_bundle_test() {
	export HOID_BUILD_ROOT
	x=$(sh -c '
. "$HOID_BUILD_ROOT/release/hoid_bundle.sh"
shelduck import https://raw.githubusercontent.com/legeyda/hoid/refs/heads/main/hoid.sh
shelduck import https://raw.githubusercontent.com/legeyda/bobshell/refs/heads/unstable/string.sh

bobshell_replace abc b 1

')

	shelduck import https://raw.githubusercontent.com/legeyda/bobshell/refs/heads/unstable/assert.sh
	assert_equals a1c "$x"
}


# fun: hoid_compile URL
hoid_compile() {
	unset hoid_compile_cache_data
	# shellcheck disable=SC2016
	bobshell_defun shelduck_event_url 'bobshell_map_put hoid_compile_cache "$1" "$2"'
	shelduck resolve "$1" > /dev/null
	hoid_compile_random="$(bobshell_random)$(bobshell_random)$(bobshell_random)"
	# shellcheck disable=SC2016
	printf '
hoid_compile_cache_data=$(cat<<\EOF_HOID_COMPILE_%s
%s
EOF_HOID_COMPILE_%s
)' "$hoid_compile_random" "$hoid_compile_cache_data" "$hoid_compile_random"
	unset hoid_compile_random

	# shellcheck disable=SC2016
	printf %s '
# fun: shelduck import http://example.com/file.sh
# txt: mock shelduck 
shelduck() {
	if [ "$1" != import ]; then
		bobshell_die "(offline mock) shelduck: import only supported"
	fi
	if bobshell_starts_with "$2" -; then
		bobshell_die "(offline mock) shelduck: options not supported"
	fi
	: "${shelduck_import_history:=}"
	if bobshell_contains "$shelduck_import_history" "$1"; then
		return
	fi
	shelduck_value=$(bobshell_map_get "$2")
	eval "$shelduck_value"
	unset shelduck_value
	shelduck_import_history="$shelduck_import_history $2"
}

'
	unset hoid_compile_cache_data

}


import_hoid() {
	SHELDUCK_URL_RULES="https://raw.githubusercontent.com/legeyda/hoid/refs/heads/main/=file://$(pwd)/"
	export SHELDUCK_URL_RULES
	shelduck import "$(pwd)/hoid.sh"
}

run_hoid() {
	import_hoid
	hoid "$@"
}

run_test() {
	if ! bobshell_isset HOID_TARGET; then
		bobshell_die 'HOID_TARGET not set' # todo auto start docker target
	fi
	bobtest "$@"
}

run_debug() {
	import_hoid
	hoid --become true init
	set -x

	hoid_task_install_docker_verify

	bobshell_die "DEBUG ($bobshell_result_size): $bobshell_result_1"
}


shelduck import https://raw.githubusercontent.com/legeyda/bobshell/refs/heads/unstable/entry_point.sh